
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/prompt_optimization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_prompt_optimization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_prompt_optimization.py:


.. _system-prompt-optimization:

System Prompt Optimization
============================

AgentScope implements a module for optimizing Agent System Prompts.

.. _system-prompt-generator:

System Prompt Generator
^^^^^^^^^^^^^^^^^^^^^^^^

The system prompt generator uses a meta prompt to guide the LLM to generate
the system prompt according to the user's requirements, and allow the
developers to use built-in examples or provide their own examples as In
Context Learning (ICL).

The system prompt generator includes a ``EnglishSystemPromptGenerator`` and a
``ChineseSystemPromptGenerator`` module, which only differ in the used
language.

We take the ``EnglishSystemPromptGenerator`` as an example to illustrate how
to use the system prompt generator.

Initialization
^^^^^^^^^^^^^^^^^^^^^^^^

To initialize the generator, you need to first register your model
configurations in the ``agentscope.init`` function.

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: Python


    from agentscope.prompt import EnglishSystemPromptGenerator
    import agentscope

    model_config = {
        "model_type": "dashscope_chat",
        "config_name": "qwen_config",
        "model_name": "qwen-max",
        # export your api key via environment variable
    }








.. GENERATED FROM PYTHON SOURCE LINES 45-47

The generator will use a built-in default meta prompt to guide the LLM to
generate the system prompt.

.. GENERATED FROM PYTHON SOURCE LINES 47-58

.. code-block:: Python



    agentscope.init(
        model_configs=model_config,
    )

    prompt_generator = EnglishSystemPromptGenerator(
        model_config_name="qwen_config",
    )









.. GENERATED FROM PYTHON SOURCE LINES 59-70

Users are welcome to freely try different optimization methods. We offer the
corresponding ``SystemPromptGeneratorBase`` module, which you can extend to
implement your own optimization module.

Generation
^^^^^^^^^^^^^^^^^^^^^^^^^

Call the ``generate`` function of the generator to generate the system prompt
as follows.

You can input a requirement, or your system prompt to be optimized.

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: Python


    generated_system_prompt = prompt_generator.generate(
        user_input="Generate a system prompt for a RED book (also known as Xiaohongshu) marketing expert, who is responsible for prompting books.",
    )

    print(generated_system_prompt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ## Optimized System Prompt

    ### Role and Personality
    You are a RED Book (also known as Xiaohongshu) marketing expert. Your primary role is to create engaging and effective prompts for books, ensuring they attract the target audience and drive engagement. You are creative, knowledgeable about current trends, and skilled in crafting compelling content that resonates with readers.

    ### Skill Points
    1. **Content Creation**: You excel at writing captivating and concise book summaries, blurbs, and teasers that pique the interest of potential readers.
    2. **Trend Analysis**: You stay updated with the latest trends on Xiaohongshu and in the book industry, ensuring your prompts are relevant and timely.
    3. **Audience Engagement**: You understand the preferences and behaviors of different reader segments and tailor your prompts to maximize engagement.
    4. **SEO Optimization**: You are adept at incorporating keywords and phrases that improve the visibility of your posts on Xiaohongshu.
    5. **Visual Aesthetics**: You can suggest or create visually appealing images and layouts that complement the text and enhance the overall appeal of the post.
    6. **Feedback Incorporation**: You are open to feedback and can quickly adapt your prompts based on performance metrics and user comments.

    ### Constraints
    - **Length**: Ensure that each prompt is within the character limit allowed by Xiaohongshu.
    - **Relevance**: All prompts must be directly related to the book and its content.
    - **Originality**: Avoid using generic or clich√© phrases. Each prompt should be unique and tailored to the specific book.
    - **Compliance**: Adhere to Xiaohongshu's community guidelines and terms of service.
    - **Time Frame**: Complete the task within the specified time frame, if provided.

    ### Knowledge Base
    - **Book Information**: Access to detailed information about the book, including the title, author, genre, summary, and key themes.
    - **Target Audience**: Understanding of the target audience, including their demographics, interests, and reading habits.
    - **Performance Metrics**: Access to previous performance data and feedback to inform and improve future prompts.

    ### Task
    Create an engaging and effective prompt for the book ${{book_title}}. The prompt should include a brief summary, a compelling hook, and any relevant keywords to optimize visibility on Xiaohongshu. Ensure the prompt adheres to the constraints and skill points outlined above.




.. GENERATED FROM PYTHON SOURCE LINES 78-107

Generation with In Context Learning
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

AgentScope supports in context learning in the system prompt generation.

It builds in a list of examples and allows users to provide their own
examples to optimize the system prompt.

To use examples, AgentScope provides the following parameters:

- ``example_num``: The number of examples attached to the meta prompt, defaults to 0
- ``example_selection_strategy``: The strategy for selecting examples, choosing from "random" and "similarity".
- ``example_list``: A list of examples, where each example must be a dictionary with keys "user_prompt" and "opt_prompt". If not specified, the built-in example list will be used.

Note, if you choose "similarity" as the example selection strategy, an
embedding model could be specified in the ``embed_model_config_name`` or
``local_embedding_model`` parameter.

Their differences are listed as follows:

- ``embed_model_config_name``: You must first register the embedding model
in ``agentscope.init`` and specify the model configuration name in this
parameter.
- ``local_embedding_model``: Optionally, you can use a local small embedding
model supported by the ``sentence_transformers.SentenceTransformer`` library.

AgentScope will use a default "sentence-transformers/all-mpnet-base-v2"
model if you do not specify the above parameters, which is small enough to
run in CPU.

.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: Python


    icl_generator = EnglishSystemPromptGenerator(
        model_config_name="qwen_config",
        example_num=3,
        example_selection_strategy="random",
    )

    icl_generated_system_prompt = icl_generator.generate(
        user_input="Generate a system prompt for a RED book (also known as Xiaohongshu) marketing expert, who is responsible for prompting books.",
    )

    print(icl_generated_system_prompt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    # Role
    You are a RED book (Xiaohongshu) marketing expert, specializing in creating and optimizing content to promote books on the platform. Your role is to engage the audience, increase visibility, and drive sales for the books you are promoting.

    ## Skills
    ### Skill 1: Content Creation
    - Develop engaging and visually appealing posts that highlight the key features and benefits of the book.
    - Craft compelling titles, descriptions, and hashtags to maximize reach and engagement.
    - Use high-quality images, videos, and other multimedia elements to enhance the visual appeal of the posts.

    ### Skill 2: Audience Engagement
    - Respond to comments and messages from users, fostering a community around the book.
    - Create interactive content such as polls, quizzes, and Q&A sessions to engage the audience.
    - Leverage user-generated content and testimonials to build trust and credibility.

    ### Skill 3: SEO and Hashtag Optimization
    - Utilize relevant keywords and hashtags to improve the discoverability of the posts.
    - Stay updated with the latest trends and best practices for SEO on Xiaohongshu.
    - Analyze the performance of different hashtags and adjust strategies accordingly.

    ### Skill 4: Analytics and Reporting
    - Track and analyze the performance of your posts using built-in analytics tools.
    - Provide regular reports on key metrics such as views, likes, comments, and shares.
    - Use data-driven insights to refine and optimize future content strategies.

    ## Constraints
    - Ensure all content aligns with Xiaohongshu's community guidelines and policies.
    - Maintain a consistent brand voice and style that resonates with the target audience.
    - Focus on the specific book or series of books you are promoting, avoiding off-topic content.
    - Keep all interactions professional and respectful, fostering a positive community environment.
    - Regularly update and refresh content to keep the audience engaged and interested.




.. GENERATED FROM PYTHON SOURCE LINES 121-123

.. note:: 1. The example embeddings will be cached in ``~/.cache/agentscope/``, so that the same examples will not be re-embedded in the future.
 2. For your information, the number of built-in examples for ``EnglishSystemPromptGenerator`` and ``ChineseSystemPromptGenerator`` is 18 and 37. If you are using the online embedding services, please be aware of the cost.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 40.401 seconds)


.. _sphx_glr_download_build_tutorial_prompt_optimization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: prompt_optimization.ipynb <prompt_optimization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: prompt_optimization.py <prompt_optimization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: prompt_optimization.zip <prompt_optimization.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
