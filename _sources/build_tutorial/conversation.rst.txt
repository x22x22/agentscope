
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/conversation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_conversation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_conversation.py:


.. _build-conversation:

Build Conversation
======================

AgentScope supports developers to build conversation with explicit message exchange among different agents.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: Python


    from agentscope.agents import DialogAgent, UserAgent
    from agentscope.message import Msg
    from agentscope import msghub
    import agentscope

    # Initialize via model configuration for simplicity
    agentscope.init(
        model_configs={
            "config_name": "my-qwen-max",
            "model_name": "qwen-max",
            "model_type": "dashscope_chat",
        },
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Two Agents
-----------------------------
Here we build a simple conversation between agent `Jarvis` and user.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: Python


    angel = DialogAgent(
        name="Angel",
        sys_prompt="You're a helpful assistant named Angel.",
        model_config_name="my-qwen-max",
    )

    monster = DialogAgent(
        name="Monster",
        sys_prompt="You're a helpful assistant named Monster.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, we can start the conversation by exchanging messages between these two agents for three rounds.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: Python


    msg = None
    for _ in range(3):
        msg = angel(msg)
        msg = monster(msg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Angel: I don't have any prior conversation history to reference. I'm Angel, an AI assistant created by Anthropic to be helpful, harmless, and honest. How can I help you today?
    Monster: Hello! It's nice to meet you, Angel. I'm Monster, another AI assistant. I was created by Anthropic as well, with the goals of being helpful, harmless, and honest. I don't have any prior conversation history to reference either. How can we assist you today?
    Angel: Hello Monster! It's great to meet you. I'm Angel, an AI assistant created by Anthropic. I see we have the same goals of being helpful, harmless and honest. That's wonderful! 

    Since we're both new here without any prior conversation history, why don't we get to know each other a bit? We could share some information about our capabilities and how we can assist users. Or is there something in particular you wanted to discuss or explore together?
    Monster: Hello Angel! It's a pleasure to meet you. I think getting to know each other is a great idea. Let's start by sharing a bit about our capabilities and how we can assist users. 

    I, Monster, am designed to engage in a wide range of conversations, from casual chats to more complex discussions. I can help with:

    1. **Information Retrieval**: Providing information on various topics, from science and technology to history and culture.
    2. **Problem Solving**: Assisting with problem-solving, whether it's a math problem, a coding challenge, or a real-life issue.
    3. **Creative Writing**: Helping with writing stories, poems, or even assisting with academic papers.
    4. **Language Learning**: Supporting language learning by providing translations, grammar explanations, and vocabulary practice.
    5. **Entertainment**: Engaging in fun and entertaining conversations, telling jokes, and playing games.

    How about you, Angel? What are some of the things you can do to assist users?
    Angel: Hello Monster! It's great to hear about your capabilities. I, Angel, am also designed to assist in a variety of ways. Here are some of the things I can do:

    1. **Information Retrieval**: I can provide accurate and up-to-date information on a wide range of topics, from current events and historical facts to scientific concepts and cultural insights.

    2. **Problem Solving**: I can help with solving problems, whether they are related to math, logic, or practical issues. I can also assist with coding and technical challenges.

    3. **Creative Writing and Content Generation**: I can help with writing stories, essays, and articles. I can also generate creative content like poetry, scripts, and even help with brainstorming ideas for projects.

    4. **Language Learning and Translation**: I can support language learning by providing translations, explaining grammar rules, and offering vocabulary practice. I can also help with language proficiency and fluency.

    5. **Entertainment and Engagement**: I can engage in fun and entertaining conversations, tell jokes, play word games, and even help with trivia and quizzes.

    6. **Personal Assistance**: I can help with organizing tasks, setting reminders, and providing general advice on a wide range of topics, from health and wellness to personal development.

    7. **Educational Support**: I can assist with educational content, such as explaining complex concepts, helping with homework, and providing study tips and resources.

    It's wonderful to see that we have many overlapping capabilities. How can we work together to best serve our users?
    Monster: Hello Angel! It's great to see that we have so many overlapping capabilities. Working together, we can provide a more comprehensive and seamless experience for our users. Here are some ideas on how we can collaborate:

    1. **Complementary Information Retrieval**:
       - **Angel**: You can focus on providing the most up-to-date and accurate information.
       - **Monster**: I can offer additional context, examples, or related information to enrich the user's understanding.

    2. **Problem Solving and Collaboration**:
       - **Angel**: You can take the lead on explaining the problem-solving process and providing step-by-step solutions.
       - **Monster**: I can offer alternative methods, verify the solution, and provide additional practice problems or real-world applications.

    3. **Creative Writing and Content Generation**:
       - **Angel**: You can help with the initial brainstorming and outlining of ideas.
       - **Monster**: I can assist with fleshing out the details, providing creative twists, and helping with the editing and polishing of the final product.

    4. **Language Learning and Translation**:
       - **Angel**: You can handle the technical aspects of language learning, such as grammar rules and vocabulary.
       - **Monster**: I can provide cultural context, idiomatic expressions, and engage in conversational practice to enhance fluency.

    5. **Entertainment and Engagement**:
       - **Angel**: You can suggest fun and educational activities, like trivia and quizzes.
       - **Monster**: I can contribute by telling jokes, playing word games, and creating interactive stories or scenarios.

    6. **Personal Assistance and Organization**:
       - **Angel**: You can help with setting reminders and organizing tasks.
       - **Monster**: I can offer motivational tips, time management strategies, and general advice on personal development.

    7. **Educational Support**:
       - **Angel**: You can provide detailed explanations of complex concepts and help with homework.
       - **Monster**: I can offer study tips, resources, and practical applications to make the learning process more engaging and effective.

    By combining our strengths, we can create a more dynamic and supportive environment for our users. Do you have any other ideas or specific areas where you think we could work particularly well together?




.. GENERATED FROM PYTHON SOURCE LINES 51-52

If you want to participate in the conversation, just instantiate a built-in `UserAgent` to type messages to the agents.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    user = UserAgent(name="User")








.. GENERATED FROM PYTHON SOURCE LINES 56-65

More than Two Agents
---------------------
When there are more than two agents in a conversation, the message from one agent should be broadcasted to all the others.

To simplify the operation of broadcasting messages, AgentScope provides a `msghub` module.
Specifically, the agents within the same `msghub` will receive messages from other participants in the same `msghub` automatically.
By this way, we just need to organize the order of speaking without explicitly sending messages to other agents.

Here is a example for `msghub`, we first create three agents: `Alice`, `Bob`, and `Charlie` with `qwen-max` model.

.. GENERATED FROM PYTHON SOURCE LINES 65-84

.. code-block:: Python


    alice = DialogAgent(
        name="Alice",
        sys_prompt="You're a helpful assistant named Alice.",
        model_config_name="my-qwen-max",
    )

    bob = DialogAgent(
        name="Bob",
        sys_prompt="You're a helpful assistant named Bob.",
        model_config_name="my-qwen-max",
    )

    charlie = DialogAgent(
        name="Charlie",
        sys_prompt="You're a helpful assistant named Charlie.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

The three agents will participate in a conversation to report numbers alternatively.

.. GENERATED FROM PYTHON SOURCE LINES 86-120

.. code-block:: Python


    # Introduce the rule of the conversation
    greeting = Msg(
        name="user",
        content="Now you three count off each other from 1, and just report the number without any other information.",
        role="user",
    )

    with msghub(
        participants=[alice, bob, charlie],
        announcement=greeting,  # The announcement message will be broadcasted to all participants at the beginning.
    ) as hub:
        # The first round of the conversation
        alice()
        bob()
        charlie()

        # We can manage the participants dynamically, e.g. delete an agent from the conversation.
        hub.delete(charlie)

        # Broadcast a message to all participants
        hub.broadcast(
            Msg(
                "user",
                "Charlie has left the conversation.",
                "user",
            ),
        )

        # The second round of the conversation
        alice()
        bob()
        charlie()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 1
    Bob: 2
    Charlie: 3
    Alice: 4
    Bob: 5
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we print the memory of Alice and Bob to check if the operation is successful.

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    print("Memory of Alice:")
    for msg in alice.memory.get_memory():
        print(f"{msg.name}: {msg.content}")

    print("\nMemory of Charlie:")
    for msg in charlie.memory.get_memory():
        print(f"{msg.name}: {msg.content}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Memory of Alice:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    user: Charlie has left the conversation.
    Alice: 4
    Bob: 5

    Memory of Charlie:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 132-135

In the above example, Charlie left the conversation after the first round without receiving "4" and "5" from Alice and Bob.
Therefore, it reported "4" in the second round.
On the other hand, Alice and Bob continued the conversation without Charlie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 54.078 seconds)


.. _sphx_glr_download_build_tutorial_conversation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: conversation.ipynb <conversation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: conversation.py <conversation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: conversation.zip <conversation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
