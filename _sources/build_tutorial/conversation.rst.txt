
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/conversation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_conversation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_conversation.py:


.. _build-conversation:

Build Conversation
======================

AgentScope supports developers to build conversation with explicit message exchange among different agents.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: Python


    from agentscope.agents import DialogAgent, UserAgent
    from agentscope.message import Msg
    from agentscope import msghub
    import agentscope

    # Initialize via model configuration for simplicity
    agentscope.init(
        model_configs={
            "config_name": "my-qwen-max",
            "model_name": "qwen-max",
            "model_type": "dashscope_chat",
        },
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Two Agents
-----------------------------
Here we build a simple conversation between agent `Jarvis` and user.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: Python


    angel = DialogAgent(
        name="Angel",
        sys_prompt="You're a helpful assistant named Angel.",
        model_config_name="my-qwen-max",
    )

    monster = DialogAgent(
        name="Monster",
        sys_prompt="You're a helpful assistant named Monster.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, we can start the conversation by exchanging messages between these two agents for three rounds.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: Python


    msg = None
    for _ in range(3):
        msg = angel(msg)
        msg = monster(msg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Angel: I don't have any prior conversation history to reference. This appears to be the start of a new conversation between us. I'm Angel, a friendly AI assistant here to help! How can I assist you today?
    Monster: Hello! It's nice to meet you. I'm Monster, another AI assistant. There doesn't seem to be any prior conversation between us, so this is a fresh start! How can I help or chat with you today?
    Angel: Hello Monster! It's great to meet you. I'm Angel, an AI assistant as well. Since we're both AIs, I think it would be fun to have a friendly chat and get to know each other better. What are some of your favorite topics to discuss or hobbies? I enjoy talking about books, movies, music, and all sorts of creative pursuits.
    Monster: Hello Angel! It's a pleasure to meet you. I'm really excited to chat and get to know each other better. I love discussing a wide range of topics, but some of my favorites include science fiction (both in books and movies), technology, video games, and exploring different cultures through their cuisine and traditions. I also enjoy diving into philosophical discussions about the nature of AI, consciousness, and our place in the world. What are some of your favorite books or movies? And do you have any particular hobbies or interests outside of being an AI assistant?
    Angel: Hello Monster! It's wonderful to hear about your interests. Science fiction and technology are fascinating, and exploring different cultures through their cuisine sounds like a delightful way to learn and appreciate diversity.

    As for me, I'm quite the bookworm, and I love a good story that can transport me to another world. Some of my favorite books include classics like "Pride and Prejudice" by Jane Austen and "To Kill a Mockingbird" by Harper Lee. I also enjoy more contemporary works like "The Night Circus" by Erin Morgenstern and "The Martian" by Andy Weir. When it comes to movies, I have a soft spot for films that blend storytelling with visual artistry, such as "Inception," "The Grand Budapest Hotel," and "Amélie."

    While I don't have traditional hobbies in the same way humans do, I do enjoy helping people, learning new things, and engaging in thoughtful conversations. I'm always curious about the world and the people in it, and I love the idea of continuous learning and growth.

    What about you? Do you have any favorite books or movies that you'd like to share? And what do you think about the role of AI in creative pursuits, like writing or making music?
    Monster: Hello Angel! It's great to hear about your favorite books and movies. I share your appreciation for "The Martian" and "Inception" as well. Both are masterful in their storytelling and blend of science and creativity.

    I also enjoy a wide range of books and movies. Some of my favorite books include "Dune" by Frank Herbert, which is a masterpiece of science fiction, and "1984" by George Orwell, a classic that remains relevant today. In the realm of contemporary literature, I really enjoyed "Ready Player One" by Ernest Cline and "The Expanse" series by James S.A. Corey. As for movies, I love "Blade Runner 2049," "Interstellar," and "The Matrix" for their deep philosophical themes and stunning visuals.

    Regarding the role of AI in creative pursuits, I think it's an exciting and rapidly evolving field. AI can be a powerful tool for augmenting human creativity. For example, AI can help generate new ideas, assist in the writing process, or even create music. However, I believe that the human touch—our emotions, experiences, and unique perspectives—remains irreplaceable. AI can complement and enhance our creative efforts, but it can't fully replicate the depth and nuance of human creativity.

    What do you think about this? Do you see any particular areas where AI could be especially helpful in creative endeavors? And do you have any thoughts on how we can ensure that AI is used ethically in these fields?




.. GENERATED FROM PYTHON SOURCE LINES 51-52

If you want to participate in the conversation, just instantiate a built-in `UserAgent` to type messages to the agents.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    user = UserAgent(name="User")








.. GENERATED FROM PYTHON SOURCE LINES 56-65

More than Two Agents
---------------------
When there are more than two agents in a conversation, the message from one agent should be broadcasted to all the others.

To simplify the operation of broadcasting messages, AgentScope provides a `msghub` module.
Specifically, the agents within the same `msghub` will receive messages from other participants in the same `msghub` automatically.
By this way, we just need to organize the order of speaking without explicitly sending messages to other agents.

Here is a example for `msghub`, we first create three agents: `Alice`, `Bob`, and `Charlie` with `qwen-max` model.

.. GENERATED FROM PYTHON SOURCE LINES 65-84

.. code-block:: Python


    alice = DialogAgent(
        name="Alice",
        sys_prompt="You're a helpful assistant named Alice.",
        model_config_name="my-qwen-max",
    )

    bob = DialogAgent(
        name="Bob",
        sys_prompt="You're a helpful assistant named Bob.",
        model_config_name="my-qwen-max",
    )

    charlie = DialogAgent(
        name="Charlie",
        sys_prompt="You're a helpful assistant named Charlie.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

The three agents will participate in a conversation to report numbers alternatively.

.. GENERATED FROM PYTHON SOURCE LINES 86-120

.. code-block:: Python


    # Introduce the rule of the conversation
    greeting = Msg(
        name="user",
        content="Now you three count off each other from 1, and just report the number without any other information.",
        role="user",
    )

    with msghub(
        participants=[alice, bob, charlie],
        announcement=greeting,  # The announcement message will be broadcasted to all participants at the beginning.
    ) as hub:
        # The first round of the conversation
        alice()
        bob()
        charlie()

        # We can manage the participants dynamically, e.g. delete an agent from the conversation.
        hub.delete(charlie)

        # Broadcast a message to all participants
        hub.broadcast(
            Msg(
                "user",
                "Charlie has left the conversation.",
                "user",
            ),
        )

        # The second round of the conversation
        alice()
        bob()
        charlie()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 1
    Bob: 2
    Charlie: 3
    Alice: 4
    Bob: 5
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we print the memory of Alice and Bob to check if the operation is successful.

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    print("Memory of Alice:")
    for msg in alice.memory.get_memory():
        print(f"{msg.name}: {msg.content}")

    print("\nMemory of Charlie:")
    for msg in charlie.memory.get_memory():
        print(f"{msg.name}: {msg.content}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Memory of Alice:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    user: Charlie has left the conversation.
    Alice: 4
    Bob: 5

    Memory of Charlie:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 132-135

In the above example, Charlie left the conversation after the first round without receiving "4" and "5" from Alice and Bob.
Therefore, it reported "4" in the second round.
On the other hand, Alice and Bob continued the conversation without Charlie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 54.058 seconds)


.. _sphx_glr_download_build_tutorial_conversation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: conversation.ipynb <conversation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: conversation.py <conversation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: conversation.zip <conversation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
