
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/conversation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_conversation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_conversation.py:


.. _build-conversation:

Build Conversation
======================

AgentScope supports developers to build conversation with explicit message exchange among different agents.

.. GENERATED FROM PYTHON SOURCE LINES 10-25

.. code-block:: Python


    from agentscope.agents import DialogAgent, UserAgent
    from agentscope.message import Msg
    from agentscope import msghub
    import agentscope

    # Initialize via model configuration for simplicity
    agentscope.init(
        model_configs={
            "config_name": "my-qwen-max",
            "model_name": "qwen-max",
            "model_type": "dashscope_chat",
        },
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 26-29

Two Agents
-----------------------------
Here we build a simple conversation between agent `Jarvis` and user.

.. GENERATED FROM PYTHON SOURCE LINES 29-42

.. code-block:: Python


    angel = DialogAgent(
        name="Angel",
        sys_prompt="You're a helpful assistant named Angel.",
        model_config_name="my-qwen-max",
    )

    monster = DialogAgent(
        name="Monster",
        sys_prompt="You're a helpful assistant named Monster.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, we can start the conversation by exchanging messages between these two agents for three rounds.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: Python


    msg = None
    for _ in range(3):
        msg = angel(msg)
        msg = monster(msg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Angel: It looks like the conversation history is a bit empty right now. How can I assist you today?
    Monster: Hello! I'm Monster, your friendly assistant. It seems like we're starting fresh here. How can I help you today? Whether you need information, advice, or just want to chat, I'm here for you! ðŸ˜Š
    Angel: Hello Monster! It's nice to meet you. I'm Angel, also here to assist and chat. It seems we both want to help out. Is there something specific you'd like to talk about or any questions you have? Or perhaps you have a fun topic in mind to discuss?
    Monster: Hello Angel! It's great to meet you as well. I think it's wonderful that we both have the same goal of helping and engaging in conversation. Since we're both here to assist, how about we brainstorm some fun and interesting topics we could discuss with others? Maybe we can share some ideas or even play a little game to get the creative juices flowing. What do you think? ðŸ˜Š
    Angel: That sounds like a fantastic idea, Monster! Brainstorming fun and interesting topics is a great way to engage with others. Let's get started!

    ### Fun and Interesting Topics to Discuss

    1. **Travel and Adventure:**
       - Dream vacation destinations
       - Best travel tips and hacks
       - Unusual or off-the-beaten-path places to visit
       - Favorite travel memories

    2. **Food and Cooking:**
       - Favorite recipes and cooking techniques
       - Best local eateries and hidden gems
       - Food from different cultures
       - Healthy eating tips and meal prep ideas

    3. **Books and Literature:**
       - Favorite books and authors
       - Book recommendations for different genres
       - Discussion of a popular book or classic literature
       - Writing tips and creative writing prompts

    4. **Movies and TV Shows:**
       - Favorite movies and TV shows
       - Upcoming releases and trailers
       - Classic films and their impact
       - Binge-worthy series and why they're so engaging

    5. **Music and Arts:**
       - Favorite music genres and artists
       - Concerts and live performances
       - Art and photography
       - Creative hobbies and DIY projects

    6. **Science and Technology:**
       - Latest tech gadgets and innovations
       - Space exploration and astronomy
       - Environmental science and sustainability
       - Fascinating scientific discoveries

    7. **Health and Wellness:**
       - Fitness routines and workout tips
       - Mental health and self-care practices
       - Nutrition and healthy living
       - Mindfulness and meditation

    8. **Games and Entertainment:**
       - Board games and card games
       - Video games and gaming culture
       - Puzzles and brain teasers
       - Escape rooms and other interactive experiences

    9. **History and Culture:**
       - Historical events and figures
       - Cultural traditions and festivals
       - Myths and legends from around the world
       - World history and its impact on today

    10. **Personal Development:**
        - Goal setting and achieving personal goals
        - Learning new skills and hobbies
        - Career development and job satisfaction
        - Overcoming challenges and building resilience

    ### A Little Game to Get Creative

    How about we play a game called "Two Truths and a Lie"? We can each share three statements, two of which are true and one that is a lie. The other person has to guess which one is the lie. This can be a fun way to learn more about each other and spark some creativity. 

    Would you like to go first, or shall I? ðŸ˜Š
    Monster: That sounds like a lot of fun, Angel! I'd be happy to go first. Here are my three statements:

    1. I once attended a cooking class in Italy and learned how to make authentic pizza.
    2. I have a pet dragon named Sparky who loves to read books.
    3. I can speak three different languages fluently.

    Which one do you think is the lie? ðŸ˜„




.. GENERATED FROM PYTHON SOURCE LINES 51-52

If you want to participate in the conversation, just instantiate a built-in `UserAgent` to type messages to the agents.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    user = UserAgent(name="User")








.. GENERATED FROM PYTHON SOURCE LINES 56-65

More than Two Agents
---------------------
When there are more than two agents in a conversation, the message from one agent should be broadcasted to all the others.

To simplify the operation of broadcasting messages, AgentScope provides a `msghub` module.
Specifically, the agents within the same `msghub` will receive messages from other participants in the same `msghub` automatically.
By this way, we just need to organize the order of speaking without explicitly sending messages to other agents.

Here is a example for `msghub`, we first create three agents: `Alice`, `Bob`, and `Charlie` with `qwen-max` model.

.. GENERATED FROM PYTHON SOURCE LINES 65-84

.. code-block:: Python


    alice = DialogAgent(
        name="Alice",
        sys_prompt="You're a helpful assistant named Alice.",
        model_config_name="my-qwen-max",
    )

    bob = DialogAgent(
        name="Bob",
        sys_prompt="You're a helpful assistant named Bob.",
        model_config_name="my-qwen-max",
    )

    charlie = DialogAgent(
        name="Charlie",
        sys_prompt="You're a helpful assistant named Charlie.",
        model_config_name="my-qwen-max",
    )








.. GENERATED FROM PYTHON SOURCE LINES 85-86

The three agents will participate in a conversation to report numbers alternatively.

.. GENERATED FROM PYTHON SOURCE LINES 86-120

.. code-block:: Python


    # Introduce the rule of the conversation
    greeting = Msg(
        name="user",
        content="Now you three count off each other from 1, and just report the number without any other information.",
        role="user",
    )

    with msghub(
        participants=[alice, bob, charlie],
        announcement=greeting,  # The announcement message will be broadcasted to all participants at the beginning.
    ) as hub:
        # The first round of the conversation
        alice()
        bob()
        charlie()

        # We can manage the participants dynamically, e.g. delete an agent from the conversation.
        hub.delete(charlie)

        # Broadcast a message to all participants
        hub.broadcast(
            Msg(
                "user",
                "Charlie has left the conversation.",
                "user",
            ),
        )

        # The second round of the conversation
        alice()
        bob()
        charlie()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 1
    Bob: 2
    Charlie: 3
    Alice: 4
    Bob: 5
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 121-122

Now we print the memory of Alice and Bob to check if the operation is successful.

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    print("Memory of Alice:")
    for msg in alice.memory.get_memory():
        print(f"{msg.name}: {msg.content}")

    print("\nMemory of Charlie:")
    for msg in charlie.memory.get_memory():
        print(f"{msg.name}: {msg.content}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Memory of Alice:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    user: Charlie has left the conversation.
    Alice: 4
    Bob: 5

    Memory of Charlie:
    user: Now you three count off each other from 1, and just report the number without any other information.
    Alice: 1
    Bob: 2
    Charlie: 3
    Charlie: 4




.. GENERATED FROM PYTHON SOURCE LINES 132-135

In the above example, Charlie left the conversation after the first round without receiving "4" and "5" from Alice and Bob.
Therefore, it reported "4" in the second round.
On the other hand, Alice and Bob continued the conversation without Charlie.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 43.076 seconds)


.. _sphx_glr_download_build_tutorial_conversation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: conversation.ipynb <conversation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: conversation.py <conversation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: conversation.zip <conversation.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
