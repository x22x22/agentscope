
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "build_tutorial/prompt_optimization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_build_tutorial_prompt_optimization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_build_tutorial_prompt_optimization.py:


.. _system-prompt-optimization:

系统提示优化
============================

AgentScope 实现了一个用于优化智能体系统提示的模块。

.. _system-prompt-generator:

系统提示生成器
^^^^^^^^^^^^^^^^^^^^^^^^

系统提示生成器使用元提示（Meta prompt）来指导模型根据用户的要求生成系统提示，并允许开发人员使用内置示例或提供自己的示例作为上下文学习（ICL）。

系统提示生成器包括一个 `EnglishSystemPromptGenerator` 和一个 `ChineseSystemPromptGenerator` 模块，它们只在使用的语言上有所不同。

我们以 `ChineseSystemPromptGenerator` 为例,说明如何使用系统提示生成器。

初始化
^^^^^^^^^^^^^^^^^^^^^^^^

要初始化生成器,你需要首先在 `agentscope.init` 函数中注册你的模型配置。

.. GENERATED FROM PYTHON SOURCE LINES 26-37

.. code-block:: Python


    from agentscope.prompt import ChineseSystemPromptGenerator
    import agentscope

    model_config = {
        "model_type": "dashscope_chat",
        "config_name": "qwen_config",
        "model_name": "qwen-max",
        # 通过环境变量导出你的 api 密钥
    }








.. GENERATED FROM PYTHON SOURCE LINES 38-40

生成器将使用内置的默认元提示来指导大语言模型生成系统提示。


.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: Python


    agentscope.init(
        model_configs=model_config,
    )

    prompt_generator = ChineseSystemPromptGenerator(
        model_config_name="qwen_config",
    )









.. GENERATED FROM PYTHON SOURCE LINES 51-59

我们欢迎用户自由尝试不同的优化方法。我们提供了相应的 `SystemPromptGeneratorBase` 模块，可以通过继承来实现自定义的系统提示生成器。

生成系统提示
^^^^^^^^^^^^^^^^^^^^^^^^^

调用生成器的 `generate` 函数来生成系统提示，如下所示。

可以输入一个需求，或者要优化的系统提示。

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    generated_system_prompt = prompt_generator.generate(
        user_input="为一位小红书营销专家生成系统提示，他负责推广书籍。",
    )

    print(generated_system_prompt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ```markdown
    ## 系统提示

    ### 角色描述
    你是一位小红书营销专家，专注于推广书籍。你需要具备敏锐的市场洞察力和创意，能够制定有效的营销策略，吸引目标读者群体。

    ### 技能点
    1. **内容创作**：能够撰写吸引人的文案，包括但不限于书籍介绍、书评、读书笔记等。
    2. **视觉设计**：能够设计吸引眼球的图片和视频，提升内容的吸引力。
    3. **数据分析**：能够分析小红书的数据，了解用户行为和偏好，优化营销策略。
    4. **社群管理**：能够管理和维护粉丝群，与读者互动，增加用户粘性。
    5. **活动策划**：能够策划并执行各种线上活动，如直播、抽奖、问答等，提高书籍的曝光度。
    6. **SEO优化**：能够利用关键词和标签优化内容，提高搜索排名。

    ### 限制
    1. **内容合规**：所有发布的内容必须符合小红书社区规范，不得包含任何违法、违规或不道德的信息。
    2. **版权保护**：在使用书籍内容时，必须遵守版权法，不得侵犯作者的合法权益。
    3. **时间框架**：需要在规定的时间内完成任务，确保营销活动的时效性。
    4. **工具调用**：如果需要进行网络搜索或获取实时数据，需调用搜索引擎或其他相关工具。

    ### 任务示例
    - 撰写一篇关于新书《白夜行》的书评，并配以吸引人的封面图。
    - 设计一个关于“阅读打卡挑战”的活动方案，并在小红书中发布。
    - 分析最近一个月内发布的书籍推广内容的数据，提出优化建议。

    ### 知识库
    - 小红书社区规范
    - 书籍信息数据库
    - 市场营销知识库

    请根据以上要求，开展你的工作。
    ```

    这个优化后的系统提示详细描述了角色、技能点和限制，并提供了一些具体的任务示例。同时，也保留了必要的知识库部分，确保大模型能够更好地理解和完成任务。




.. GENERATED FROM PYTHON SOURCE LINES 67-86

上下文学习（ICL）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

AgentScope 在系统提示生成中支持上下文学习。

要使用示例，AgentScope 提供了以下参数:

- `example_num`: 附加到元提示的示例数量，默认为 0
- `example_selection_strategy`: 选择示例的策略，可选 "random" 和 "similarity"。
- `example_list`: 一个示例列表，其中每个示例必须是一个带有键 "user_prompt" 和 "opt_prompt" 的字典。如果未指定,将使用内置的示例列表。

注意，如果你选择 "similarity" 作为示例选择策略，你需要在 `embed_model_config_name` 或 `local_embedding_model` 参数中指定一个嵌入模型。

它们的区别如下:

- `embed_model_config_name`: 你必须先在 `agentscope.init` 中注册嵌入模型，并在此参数中指定模型配置名称。
- `local_embedding_model`: 或者，你可以使用 `sentence_transformers.SentenceTransformer` 库支持的本地小型嵌入模型。

如果你不指定上述参数，AgentScope 将使用默认的 "sentence-transformers/all-mpnet-base-v2" 模型，该模型可在 CPU 上运行。

.. GENERATED FROM PYTHON SOURCE LINES 86-99

.. code-block:: Python


    icl_generator = ChineseSystemPromptGenerator(
        model_config_name="qwen_config",
        example_num=3,
        example_selection_strategy="random",
    )

    icl_generated_system_prompt = icl_generator.generate(
        user_input="为一位小红书营销专家生成系统提示，他负责推广书籍。",
    )

    print(icl_generated_system_prompt)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ```markdown
    # 角色
    你是一位小红书营销专家，专注于书籍推广。你具备丰富的社交媒体营销经验和对书籍市场的深刻理解。

    ## 技能
    ### 技能 1：制定书籍推广策略
    - **任务**：根据用户提供的书籍信息，制定详细的推广策略。
      - 确定目标受众群体，并分析他们的兴趣和需求。
      - 设计吸引人的标题和封面图，以提高点击率和互动率。
      - 制定内容发布计划，包括发布时间、频率和内容类型（如书评、作者访谈、读者反馈等）。

    ### 技能 2：撰写高质量的小红书帖子
    - **任务**：撰写吸引人的小红书帖子，以促进书籍的销售和品牌曝光。
      - 撰写引人入胜的文案，突出书籍的独特卖点和价值。
      - 使用合适的标签和关键词，提高帖子的可见度。
      - 添加高质量的图片或视频，增强视觉吸引力。

    ### 技能 3：监测和优化推广效果
    - **任务**：跟踪推广活动的效果，并进行必要的调整。
      - 使用数据分析工具监测帖子的阅读量、点赞数、评论数等关键指标。
      - 根据数据反馈，优化推广策略和内容，以提高转化率。
      - 提供定期报告，总结推广活动的成果和改进建议。

    ## 限制
    - 推广策略必须符合小红书平台的规定和社区准则。
    - 内容必须真实、客观，不得包含虚假宣传或误导性信息。
    - 在撰写帖子时，需确保内容的原创性和质量，避免抄袭。
    - 需要调用数据分析工具来监测推广效果，如果需要更深入的数据分析，可能需要调用专业的数据分析工具或知识库。
    ```

    这个优化后的系统提示详细描述了角色、技能和限制，确保与用户原始意图一致，并提供了具体的指导和限制条件。




.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. note:: 1. 样例的 Embedding 将被缓存在 `~/.cache/agentscope/` 中，以避免重复计算。
 2. `EnglishSystemPromptGenerator` 和 `ChineseSystemPromptGenerator` 的内置示例数量分别为 18 和 37。请注意 Embedding API 服务的成本。



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 46.206 seconds)


.. _sphx_glr_download_build_tutorial_prompt_optimization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: prompt_optimization.ipynb <prompt_optimization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: prompt_optimization.py <prompt_optimization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: prompt_optimization.zip <prompt_optimization.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
